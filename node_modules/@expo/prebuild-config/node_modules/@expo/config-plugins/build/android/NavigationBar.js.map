{"version":3,"sources":["../../src/android/NavigationBar.ts"],"names":["NAVIGATION_BAR_COLOR","withNavigationBar","config","immersiveMode","getNavigationBarImmersiveMode","withNavigationBarColors","withNavigationBarStyles","modResults","setNavigationBarColors","setNavigationBarStyles","colors","hexString","getNavigationBarColor","name","value","styles","add","parent","getNavigationBarStyle","androidNavigationBar","visible","backgroundColor","barStyle"],"mappings":";;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA,MAAMA,oBAAoB,GAAG,oBAA7B;;AAEO,MAAMC,iBAA+B,GAAGC,MAAM,IAAI;AACvD,QAAMC,aAAa,GAAGC,6BAA6B,CAACF,MAAD,CAAnD;;AACA,MAAIC,aAAJ,EAAmB;AACjB;AACA;AACA,uCACE,8BADF,EAEE,yDAFF,EAGE,4DAHF;AAKD;;AAEDD,EAAAA,MAAM,GAAGG,uBAAuB,CAACH,MAAD,CAAhC;AACAA,EAAAA,MAAM,GAAGI,uBAAuB,CAACJ,MAAD,CAAhC;AACA,SAAOA,MAAP;AACD,CAfM;;;;AAiBP,MAAMG,uBAAqC,GAAGH,MAAM,IAAI;AACtD,SAAO,yCAAkBA,MAAlB,EAA0BA,MAAM,IAAI;AACzCA,IAAAA,MAAM,CAACK,UAAP,GAAoBC,sBAAsB,CAACN,MAAD,EAASA,MAAM,CAACK,UAAhB,CAA1C;AACA,WAAOL,MAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,MAAMI,uBAAqC,GAAGJ,MAAM,IAAI;AACtD,SAAO,yCAAkBA,MAAlB,EAA0BA,MAAM,IAAI;AACzCA,IAAAA,MAAM,CAACK,UAAP,GAAoBE,sBAAsB,CAACP,MAAD,EAASA,MAAM,CAACK,UAAhB,CAA1C;AACA,WAAOL,MAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOO,SAASM,sBAAT,CACLN,MADK,EAELQ,MAFK,EAGQ;AACb,QAAMC,SAAS,GAAGC,qBAAqB,CAACV,MAAD,CAAvC;;AACA,MAAIS,SAAJ,EAAe;AACbD,IAAAA,MAAM,GAAG,4BACP,oCAAkB;AAChBG,MAAAA,IAAI,EAAEb,oBADU;AAEhBc,MAAAA,KAAK,EAAEH;AAFS,KAAlB,CADO,EAKPD,MALO,CAAT;AAOD;;AACD,SAAOA,MAAP;AACD;;AAEM,SAASD,sBAAT,CACLP,MADK,EAELa,MAFK,EAGQ;AACbA,EAAAA,MAAM,GAAG,iCAAkBA,MAAlB,EAA0B;AACjCC,IAAAA,GAAG,EAAE,CAAC,CAACJ,qBAAqB,CAACV,MAAD,CADK;AAEjCe,IAAAA,MAAM,EAAE,iDAFyB;AAGjCJ,IAAAA,IAAI,EAAG,WAAUb,oBAAqB,EAHL;AAIjCc,IAAAA,KAAK,EAAG,UAASd,oBAAqB;AAJL,GAA1B,CAAT;AAOAe,EAAAA,MAAM,GAAG,iCAAkBA,MAAlB,EAA0B;AACjCC,IAAAA,GAAG,EAAEE,qBAAqB,CAAChB,MAAD,CAArB,KAAkC,cADN;AAEjCe,IAAAA,MAAM,EAAE,iDAFyB;AAGjCJ,IAAAA,IAAI,EAAE,kCAH2B;AAIjCC,IAAAA,KAAK,EAAE;AAJ0B,GAA1B,CAAT;AAOA,SAAOC,MAAP;AACD;;AAEM,SAASX,6BAAT,CAAuCF,MAAvC,EAAyF;AAAA;;AAC9F,SAAO,0BAAAA,MAAM,CAACiB,oBAAP,gFAA6BC,OAA7B,KAAwC,IAA/C;AACD;;AAEM,SAASR,qBAAT,CAA+BV,MAA/B,EAAiF;AAAA;;AACtF,SAAO,2BAAAA,MAAM,CAACiB,oBAAP,kFAA6BE,eAA7B,KAAgD,IAAvD;AACD;;AAEM,SAASH,qBAAT,CAA+BhB,MAA/B,EAAiF;AAAA;;AACtF,SAAO,2BAAAA,MAAM,CAACiB,oBAAP,kFAA6BG,QAA7B,KAAyC,eAAhD;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { setColorItem } from './Colors';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\n\nexport const withNavigationBar: ConfigPlugin = config => {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  if (immersiveMode) {\n    // Immersive mode needs to be set programmatically\n    // TODO: Resolve\n    addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Hiding the navigation bar must be done programmatically',\n      'https://developer.android.com/training/system-ui/immersive'\n    );\n  }\n\n  config = withNavigationBarColors(config);\n  config = withNavigationBarStyles(config);\n  return config;\n};\n\nconst withNavigationBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setNavigationBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withNavigationBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setNavigationBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setNavigationBarColors(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  const hexString = getNavigationBarColor(config);\n  if (hexString) {\n    colors = setColorItem(\n      buildResourceItem({\n        name: NAVIGATION_BAR_COLOR,\n        value: hexString,\n      }),\n      colors\n    );\n  }\n  return colors;\n}\n\nexport function setNavigationBarStyles(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  styles = assignStylesValue(styles, {\n    add: !!getNavigationBarColor(config),\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: `android:${NAVIGATION_BAR_COLOR}`,\n    value: `@color/${NAVIGATION_BAR_COLOR}`,\n  });\n\n  styles = assignStylesValue(styles, {\n    add: getNavigationBarStyle(config) === 'dark-content',\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: 'android:windowLightNavigationBar',\n    value: 'true',\n  });\n\n  return styles;\n}\n\nexport function getNavigationBarImmersiveMode(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n"],"file":"NavigationBar.js"}