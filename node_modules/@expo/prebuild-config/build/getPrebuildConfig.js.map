{"version":3,"sources":["../src/getPrebuildConfig.ts"],"names":["getPrebuildConfig","projectRoot","platforms","bundleIdentifier","packageName","expoUsername","exp","config","rest","skipSDKVersionRequirement","isModdedConfig","resolvedExpoUsername","includes","ios","android","package"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOO,SAASA,iBAAT,CACLC,WADK,EAEL;AACEC,EAAAA,SADF;AAEEC,EAAAA,gBAFF;AAGEC,EAAAA,WAHF;AAIEC,EAAAA;AAJF,CAFK,EAaL;AACA;AACA,MAAI;AAAEC,IAAAA,GAAG,EAAEC,MAAP;AAAe,OAAGC;AAAlB,MAA2B,yBAAUP,WAAV,EAAuB;AACpDQ,IAAAA,yBAAyB,EAAE,IADyB;AAEpDC,IAAAA,cAAc,EAAE;AAFoC,GAAvB,CAA/B;AAKA,QAAMC,oBAAoB,GACxB,OAAON,YAAP,KAAwB,UAAxB,GACIA,YAAY,CAACE,MAAD,CADhB,GAEI;AACAF,EAAAA,YAHJ,aAGIA,YAHJ,cAGIA,YAHJ,GAGoB,kCAAmBE,MAAnB,CAJtB,CAPA,CAaA;AACA;;AACAA,EAAAA,MAAM,GAAG,uDAA4BA,MAA5B,EAAoC;AAC3CF,IAAAA,YAAY,EAAEM;AAD6B,GAApC,CAAT;AAGAJ,EAAAA,MAAM,GAAG,iDAAsBA,MAAtB,CAAT;;AAEA,MAAIL,SAAS,CAACU,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAAA;;AAC7B,QAAI,CAACL,MAAM,CAACM,GAAZ,EAAiBN,MAAM,CAACM,GAAP,GAAa,EAAb;AACjBN,IAAAA,MAAM,CAACM,GAAP,CAAWV,gBAAX,WACEA,gBADF,aACEA,gBADF,cACEA,gBADF,GACsBI,MAAM,CAACM,GAAP,CAAWV,gBADjC,uCACsD,uBADtD,CAF6B,CAK7B;;AACAI,IAAAA,MAAM,GAAG,8CAAmBA,MAAnB,EAA2B;AAClCJ,MAAAA,gBAAgB,EAAEI,MAAM,CAACM,GAAP,CAAWV;AADK,KAA3B,CAAT;AAGD;;AAED,MAAID,SAAS,CAACU,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AAAA;;AACjC,QAAI,CAACL,MAAM,CAACO,OAAZ,EAAqBP,MAAM,CAACO,OAAP,GAAiB,EAAjB;AACrBP,IAAAA,MAAM,CAACO,OAAP,CAAeC,OAAf,YAAyBX,WAAzB,aAAyBA,WAAzB,cAAyBA,WAAzB,GAAwCG,MAAM,CAACO,OAAP,CAAeC,OAAvD,yCAAmE,uBAAnE,CAFiC,CAIjC;;AACAR,IAAAA,MAAM,GAAG,kDAAuBA,MAAvB,EAA+B;AACtCQ,MAAAA,OAAO,EAAER,MAAM,CAACO,OAAP,CAAeC;AADc,KAA/B,CAAT;AAGD;;AAED,SAAO;AAAET,IAAAA,GAAG,EAAEC,MAAP;AAAe,OAAGC;AAAlB,GAAP;AACD","sourcesContent":["import { getAccountUsername, getConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport {\n  withAndroidExpoPlugins,\n  withIosExpoPlugins,\n  withLegacyExpoPlugins,\n  withVersionedExpoSDKPlugins,\n} from './plugins/withDefaultPlugins';\n\nexport function getPrebuildConfig(\n  projectRoot: string,\n  {\n    platforms,\n    bundleIdentifier,\n    packageName,\n    expoUsername,\n  }: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n    expoUsername?: string | ((config: ExpoConfig) => string | null);\n  }\n) {\n  // let config: ExpoConfig;\n  let { exp: config, ...rest } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  const resolvedExpoUsername =\n    typeof expoUsername === 'function'\n      ? expoUsername(config)\n      : // If the user didn't pass a username then fallback on the static cached username.\n        expoUsername ?? getAccountUsername(config);\n\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withVersionedExpoSDKPlugins(config, {\n    expoUsername: resolvedExpoUsername,\n  });\n  config = withLegacyExpoPlugins(config);\n\n  if (platforms.includes('ios')) {\n    if (!config.ios) config.ios = {};\n    config.ios.bundleIdentifier =\n      bundleIdentifier ?? config.ios.bundleIdentifier ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withIosExpoPlugins(config, {\n      bundleIdentifier: config.ios.bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    if (!config.android) config.android = {};\n    config.android.package = packageName ?? config.android.package ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withAndroidExpoPlugins(config, {\n      package: config.android.package,\n    });\n  }\n\n  return { exp: config, ...rest };\n}\n"],"file":"getPrebuildConfig.js"}