{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withIosSplashAssets.ts"],"names":["debug","IMAGESET_PATH","BACKGROUND_IMAGESET_PATH","PNG_FILENAME","DARK_PNG_FILENAME","TABLET_PNG_FILENAME","DARK_TABLET_PNG_FILENAME","withIosSplashAssets","config","splash","projectPath","IOSConfig","Paths","getSourceRoot","modRequest","projectRoot","createSplashScreenBackgroundImageAsync","iosNamedProjectRoot","configureImageAssets","image","darkImage","dark","tabletImage","darkTabletImage","imageSetPath","path","resolve","fs","remove","writeContentsJsonFileAsync","assetPath","copyImageFiles","createPngFileAsync","color","filePath","png","Jimp","writeAsync","createBackgroundImagesAsync","darkColor","tabletColor","darkTabletColor","generateImagesAssetsAsync","generateImageAsset","item","fileName","anyItem","darkItem","tabletItem","darkTabletItem","copyFile","items","filter","Promise","all","map","backgroundColor","tabletBackgroundColor","imagesetPath","join","ensureDir","darkAppearances","appearance","value","buildContentsJsonImages","idiom","filename","scale","appearances","undefined","Boolean","images"],"mappings":"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","sourcesContent":["import { ConfigPlugin, IOSConfig, withDangerousMod } from '@expo/config-plugins';\nimport Debug from 'debug';\nimport fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport * as path from 'path';\n\nimport {\n  ContentsJsonImage,\n  ContentsJsonImageAppearance,\n  createContentsJsonItem,\n  writeContentsJsonAsync,\n} from '../../icons/AssetContents';\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:assets');\n\nconst IMAGESET_PATH = 'Images.xcassets/SplashScreen.imageset';\nconst BACKGROUND_IMAGESET_PATH = 'Images.xcassets/SplashScreenBackground.imageset';\nconst PNG_FILENAME = 'image.png';\nconst DARK_PNG_FILENAME = 'dark_image.png';\nconst TABLET_PNG_FILENAME = 'tablet_image.png';\nconst DARK_TABLET_PNG_FILENAME = 'dark_tablet_image.png';\n\nexport const withIosSplashAssets: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  if (!splash) {\n    return config;\n  }\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const projectPath = IOSConfig.Paths.getSourceRoot(config.modRequest.projectRoot);\n\n      await createSplashScreenBackgroundImageAsync({\n        iosNamedProjectRoot: projectPath,\n        splash,\n      });\n\n      await configureImageAssets({\n        projectPath,\n        image: splash.image,\n        darkImage: splash.dark?.image,\n        tabletImage: splash.tabletImage,\n        darkTabletImage: splash.dark?.tabletImage,\n      });\n\n      return config;\n    },\n  ]);\n};\n\n/**\n * Creates imageset containing image for Splash/Launch Screen.\n */\nasync function configureImageAssets({\n  projectPath,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectPath: string;\n  image?: string | null;\n  darkImage?: string | null;\n  tabletImage: string | null;\n  darkTabletImage?: string | null;\n}) {\n  const imageSetPath = path.resolve(projectPath, IMAGESET_PATH);\n\n  // ensure old SplashScreen imageSet is removed\n  await fs.remove(imageSetPath);\n\n  if (!image) {\n    return;\n  }\n\n  await writeContentsJsonFileAsync({\n    assetPath: imageSetPath,\n    image: PNG_FILENAME,\n    darkImage: darkImage ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletImage ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletImage ? DARK_TABLET_PNG_FILENAME : null,\n  });\n\n  await copyImageFiles({ projectPath, image, darkImage, tabletImage, darkTabletImage });\n}\n\nasync function createPngFileAsync(color: string, filePath: string) {\n  const png = new Jimp(1, 1, color);\n  return png.writeAsync(filePath);\n}\n\nasync function createBackgroundImagesAsync({\n  projectPath,\n  color,\n  darkColor,\n  tabletColor,\n  darkTabletColor,\n}: {\n  projectPath: string;\n  color: string;\n  darkColor: string | null;\n  tabletColor: string | null;\n  darkTabletColor: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      await createPngFileAsync(item, path.resolve(projectPath, BACKGROUND_IMAGESET_PATH, fileName));\n    },\n    anyItem: color,\n    darkItem: darkColor,\n    tabletItem: tabletColor,\n    darkTabletItem: darkTabletColor,\n  });\n}\n\nasync function copyImageFiles({\n  projectPath,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectPath: string;\n  image: string;\n  darkImage?: string | null;\n  tabletImage?: string | null;\n  darkTabletImage?: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      await fs.copyFile(item, path.resolve(projectPath, IMAGESET_PATH, fileName));\n    },\n    anyItem: image,\n    darkItem: darkImage,\n    tabletItem: tabletImage,\n    darkTabletItem: darkTabletImage,\n  });\n}\n\nasync function generateImagesAssetsAsync({\n  generateImageAsset,\n  anyItem,\n  darkItem,\n  tabletItem,\n  darkTabletItem,\n}: {\n  generateImageAsset: (item: string, fileName: string) => Promise<void>;\n  anyItem: string;\n  darkItem?: string | null;\n  tabletItem?: string | null;\n  darkTabletItem?: string | null;\n}) {\n  const items = ([\n    [anyItem, PNG_FILENAME],\n    [darkItem, DARK_PNG_FILENAME],\n    [tabletItem, TABLET_PNG_FILENAME],\n    [darkTabletItem, DARK_TABLET_PNG_FILENAME],\n  ].filter(([item]) => !!item) as unknown) as [string, string];\n\n  await Promise.all(items.map(([item, fileName]) => generateImageAsset(item, fileName)));\n}\n\nasync function createSplashScreenBackgroundImageAsync({\n  iosNamedProjectRoot,\n  splash,\n}: {\n  // Something like projectRoot/ios/MyApp/\n  iosNamedProjectRoot: string;\n  splash: IOSSplashConfig;\n}) {\n  const color = splash.backgroundColor;\n  const darkColor = splash.dark?.backgroundColor;\n  const tabletColor = splash.tabletBackgroundColor;\n  const darkTabletColor = splash.dark?.tabletBackgroundColor;\n\n  const imagesetPath = path.join(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH);\n  // Ensure the Images.xcassets/... path exists\n  await fs.remove(imagesetPath);\n  await fs.ensureDir(imagesetPath);\n\n  await createBackgroundImagesAsync({\n    projectPath: iosNamedProjectRoot,\n    color,\n    darkColor: darkColor ? darkColor : null,\n    tabletColor: tabletColor ? tabletColor : null,\n    darkTabletColor: darkTabletColor ? darkTabletColor : null,\n  });\n\n  await writeContentsJsonFileAsync({\n    assetPath: path.resolve(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH),\n    image: PNG_FILENAME,\n    darkImage: darkColor ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletColor ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletColor ? DARK_TABLET_PNG_FILENAME : null,\n  });\n}\n\nconst darkAppearances: ContentsJsonImageAppearance[] = [\n  {\n    appearance: 'luminosity',\n    value: 'dark',\n  } as ContentsJsonImageAppearance,\n];\n\nexport function buildContentsJsonImages({\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  image: string;\n  tabletImage: string | null;\n  darkImage: string | null;\n  darkTabletImage: string | null;\n}): ContentsJsonImage[] {\n  return [\n    // Phone light\n    createContentsJsonItem({\n      idiom: 'universal',\n      filename: image,\n      scale: '1x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '2x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '3x',\n    }),\n    // Phone dark\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        filename: darkImage,\n        scale: '1x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '3x',\n      }),\n    // Tablet light\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        filename: tabletImage,\n        scale: '1x',\n      }),\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        scale: '2x',\n      }),\n    // Phone dark\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        filename: darkTabletImage ?? undefined,\n        scale: '1x',\n      }),\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n  ].filter(Boolean) as ContentsJsonImage[];\n}\n\nasync function writeContentsJsonFileAsync({\n  assetPath,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  assetPath: string;\n  image: string;\n  darkImage: string | null;\n  tabletImage: string | null;\n  darkTabletImage: string | null;\n}) {\n  const images = buildContentsJsonImages({ image, darkImage, tabletImage, darkTabletImage });\n\n  debug(`create contents.json:`, assetPath);\n  debug(`use images:`, images);\n  await writeContentsJsonAsync(assetPath, { images });\n}\n"],"file":"withIosSplashAssets.js"}