{"version":3,"sources":["../../src/plugins/withDefaultPlugins.ts"],"names":["withIosExpoPlugins","config","bundleIdentifier","ios","IOSConfig","BundleIdentifier","withBundleIdentifier","Swift","withSwiftBridgingHeader","withNoopSwiftFile","Google","withGoogle","Name","withDisplayName","Orientation","withOrientation","RequiresFullScreen","withRequiresFullScreen","RootViewBackgroundColor","withRootViewBackgroundColor","Scheme","withScheme","UserInterfaceStyle","withUserInterfaceStyle","UsesNonExemptEncryption","withUsesNonExemptEncryption","Version","withBuildNumber","withVersion","withGoogleServicesFile","Entitlements","withAssociatedDomains","DeviceFamily","withDeviceFamily","Locales","withLocales","withIosIcons","withAndroidExpoPlugins","props","android","package","AndroidConfig","JsEngine","withJsEngineGradleProps","withNameSettingsGradle","GoogleServices","withClassPath","withApplyPlugin","Package","withPackageGradle","withPackageManifest","AllowBackup","withAllowBackup","WindowSoftInputMode","withWindowSoftInputMode","IntentFilters","withAndroidIntentFilters","Permissions","withPermissions","withUiModeManifest","withUiModeMainActivity","withName","NavigationBar","withNavigationBar","StatusBar","withStatusBar","PrimaryColor","withPrimaryColor","c","withPackageRefactor","versionedExpoSDKPackages","withVersionedExpoSDKPlugins","expoUsername","withMaps","withAdMob","withAppleAuthentication","withContacts","withNotifications","withUpdates","withBranch","withDocumentPicker","withFacebook","withSplashScreen","getAutoPlugins","concat","legacyExpoPlugins","expoManagedVersionedPlugins","getLegacyExpoPlugins","withOptionalLegacyPlugins","plugins","reduce","prev","plugin","_isLegacyPlugin","fallback","withLegacyExpoPlugins","Set"],"mappings":"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","sourcesContent":["/**\n * These are the versioned first-party plugins with some of the future third-party plugins mixed in for legacy support.\n */\nimport {\n  AndroidConfig,\n  ConfigPlugin,\n  IOSConfig,\n  StaticPlugin,\n  withPlugins,\n  withStaticPlugin,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport { withAndroidIcons } from './icons/withAndroidIcons';\nimport { withIosIcons } from './icons/withIosIcons';\nimport withAdMob from './unversioned/expo-ads-admob/expo-ads-admob';\nimport withAppleAuthentication from './unversioned/expo-apple-authentication';\nimport withBranch from './unversioned/expo-branch';\nimport withContacts from './unversioned/expo-contacts';\nimport withDocumentPicker from './unversioned/expo-document-picker';\nimport withFacebook from './unversioned/expo-facebook';\nimport withNotifications from './unversioned/expo-notifications/expo-notifications';\nimport withSplashScreen from './unversioned/expo-splash-screen/expo-splash-screen';\nimport withUpdates from './unversioned/expo-updates';\nimport withMaps from './unversioned/react-native-maps';\n\n/**\n * Config plugin to apply all of the custom Expo iOS config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withIosExpoPlugins: ConfigPlugin<{\n  bundleIdentifier: string;\n}> = (config, { bundleIdentifier }) => {\n  // Set the bundle ID ahead of time.\n  if (!config.ios) config.ios = {};\n  config.ios.bundleIdentifier = bundleIdentifier;\n\n  return withPlugins(config, [\n    [IOSConfig.BundleIdentifier.withBundleIdentifier, { bundleIdentifier }],\n    IOSConfig.Swift.withSwiftBridgingHeader,\n    IOSConfig.Swift.withNoopSwiftFile,\n    IOSConfig.Google.withGoogle,\n    IOSConfig.Name.withDisplayName,\n    IOSConfig.Orientation.withOrientation,\n    IOSConfig.RequiresFullScreen.withRequiresFullScreen,\n    IOSConfig.RootViewBackgroundColor.withRootViewBackgroundColor,\n    IOSConfig.Scheme.withScheme,\n    IOSConfig.UserInterfaceStyle.withUserInterfaceStyle,\n    IOSConfig.UsesNonExemptEncryption.withUsesNonExemptEncryption,\n    IOSConfig.Version.withBuildNumber,\n    IOSConfig.Version.withVersion,\n    IOSConfig.Google.withGoogleServicesFile,\n    // Entitlements\n    IOSConfig.Entitlements.withAssociatedDomains,\n    // XcodeProject\n    IOSConfig.DeviceFamily.withDeviceFamily,\n    IOSConfig.Locales.withLocales,\n    // Dangerous\n    withIosIcons,\n  ]);\n};\n\n/**\n * Config plugin to apply all of the custom Expo Android config plugins we support by default.\n * TODO: In the future most of this should go into versioned packages like expo-facebook, expo-updates, etc...\n */\nexport const withAndroidExpoPlugins: ConfigPlugin<{\n  package: string;\n}> = (config, props) => {\n  // Set the package name ahead of time.\n  if (!config.android) config.android = {};\n  config.android.package = props.package;\n\n  return withPlugins(config, [\n    // gradle.properties\n    AndroidConfig.JsEngine.withJsEngineGradleProps,\n\n    // settings.gradle\n    AndroidConfig.Name.withNameSettingsGradle,\n\n    // project build.gradle\n    AndroidConfig.GoogleServices.withClassPath,\n\n    // app/build.gradle\n    AndroidConfig.GoogleServices.withApplyPlugin,\n    AndroidConfig.Package.withPackageGradle,\n    AndroidConfig.Version.withVersion,\n\n    // AndroidManifest.xml\n    AndroidConfig.Package.withPackageManifest,\n    AndroidConfig.AllowBackup.withAllowBackup,\n    AndroidConfig.WindowSoftInputMode.withWindowSoftInputMode,\n    // Note: The withAndroidIntentFilters plugin must appear before the withScheme\n    // plugin or withScheme will override the output of withAndroidIntentFilters.\n    AndroidConfig.IntentFilters.withAndroidIntentFilters,\n    AndroidConfig.Scheme.withScheme,\n    AndroidConfig.Orientation.withOrientation,\n    AndroidConfig.Permissions.withPermissions,\n    AndroidConfig.UserInterfaceStyle.withUiModeManifest,\n\n    // MainActivity.*\n    AndroidConfig.UserInterfaceStyle.withUiModeMainActivity,\n\n    // strings.xml\n    AndroidConfig.Name.withName,\n\n    // Dangerous -- these plugins run in reverse order.\n    AndroidConfig.GoogleServices.withGoogleServicesFile,\n\n    // Modify colors.xml and styles.xml\n    AndroidConfig.RootViewBackgroundColor.withRootViewBackgroundColor,\n    AndroidConfig.NavigationBar.withNavigationBar,\n    AndroidConfig.StatusBar.withStatusBar,\n    AndroidConfig.PrimaryColor.withPrimaryColor,\n\n    c => withAndroidIcons(c),\n    // If we renamed the package, we should also move it around and rename it in source files\n    // Added last to ensure this plugin runs first. Out of tree solutions will mistakenly resolve the package incorrectly otherwise.\n    AndroidConfig.Package.withPackageRefactor,\n  ]);\n};\n\n// Must keep in sync with `withVersionedExpoSDKPlugins`\nconst versionedExpoSDKPackages: string[] = [\n  'react-native-maps',\n  'expo-ads-admob',\n  'expo-apple-authentication',\n  'expo-contacts',\n  'expo-notifications',\n  'expo-updates',\n  'expo-branch',\n  'expo-document-picker',\n  'expo-facebook',\n  'expo-splash-screen',\n];\n\nexport const withVersionedExpoSDKPlugins: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withPlugins(config, [\n    withMaps,\n    withAdMob,\n    withAppleAuthentication,\n    withContacts,\n    withNotifications,\n    [withUpdates, { expoUsername }],\n    withBranch,\n    withDocumentPicker,\n    withFacebook,\n    withSplashScreen,\n  ]);\n};\n\nexport function getAutoPlugins() {\n  return versionedExpoSDKPackages.concat(legacyExpoPlugins).concat(expoManagedVersionedPlugins);\n}\n\nexport function getLegacyExpoPlugins() {\n  return legacyExpoPlugins;\n}\n\n// Expo managed packages that require extra update.\n// These get applied automatically to create parity with expo build in eas build.\nconst legacyExpoPlugins = [\n  'expo-app-auth',\n  'expo-av',\n  'expo-background-fetch',\n  'expo-barcode-scanner',\n  'expo-brightness',\n  'expo-calendar',\n  'expo-camera',\n  'expo-cellular',\n  'expo-dev-menu',\n  'expo-dev-launcher',\n  'expo-dev-client',\n  'expo-image-picker',\n  'expo-file-system',\n  'expo-ads-facebook',\n  'expo-location',\n  'expo-media-library',\n  'expo-screen-orientation',\n  'expo-sensors',\n  'expo-task-manager',\n  'expo-local-authentication',\n];\n\n// Plugins that need to be automatically applied, but also get applied by expo-cli if the versioned plugin isn't available.\n// These are split up because the user doesn't need to be prompted to setup these packages.\nconst expoManagedVersionedPlugins = [\n  'expo-firebase-analytics',\n  'expo-firebase-core',\n  'expo-google-sign-in',\n];\n\nconst withOptionalLegacyPlugins: ConfigPlugin<(StaticPlugin | string)[]> = (config, plugins) => {\n  return plugins.reduce((prev, plugin) => {\n    return withStaticPlugin(prev, {\n      // hide errors\n      _isLegacyPlugin: true,\n      plugin,\n      // If a plugin doesn't exist, do nothing.\n      fallback: config => config,\n    });\n  }, config);\n};\n\nexport function withLegacyExpoPlugins(config: ExpoConfig) {\n  return withOptionalLegacyPlugins(config, [\n    ...new Set(expoManagedVersionedPlugins.concat(legacyExpoPlugins)),\n  ]);\n}\n"],"file":"withDefaultPlugins.js"}